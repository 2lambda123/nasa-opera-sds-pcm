VENUE: '{{VENUE}}'
PGE_SIMULATION_MODE: !!bool true
CRID: '{{ CRID }}'

# Settings to set the latency period for various jobs
# Settings to set the latency period for various jobs
NOMINAL_LATENCY:
    # Latency period in minutes. Expiration time is calculated from when the LDF is being processed.
    RRST_EVALUATOR: 60
    # Latency period in minutes
    DATATAKE_EVALUATOR: 360
    # Latency period in minutes
    TRACK_FRAME_EVALUATOR: 720
    # Latency period in minutes
    NETWORK_PAIR_EVALUATOR: 360

URGENT_RESPONSE_LATENCY:
    # Latency period in minutes. Expiration time is calculated from when the LDF is being processed.
    RRST_EVALUATOR: 60
    # Latency period in minutes
    DATATAKE_EVALUATOR: 15
    # Latency period in minutes
    TRACK_FRAME_EVALUATOR: 720
    # Latency period in minutes
    NETWORK_PAIR_EVALUATOR: 360

# This area is intended to be used to set any PGE configurable settings that an operator can change
# during production.

CHIMERA:
    # Leaving config for L0A, Time_Extractor, and L0B in case we want to make them as separate PGE jobs again.
    JOB_QUEUES:
        L0A: opera-job_worker-pge-l0a
        Time_Extractor: opera-job_worker-pge-time_extractor
        RSLC: opera-job_worker-pge-rslc
    JOB_TYPES:
        L0A: job-PGE_L0A
        Time_Extractor: job-PGE_Time_Extractor
        L0B: job-PGE_L0B
        RSLC: job-PGE_RSLC

PRODUCT_TYPES:
    COP:
        Pattern: !!python/regexp '(?P<id>COP_e(?P<ExecutionDateTime>\d{4}-\d{3})_c(?P<CreationDateTime>\d{4}-\d{3})_v(?P<VersionID>\d{3})\.xml)$'
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # If you have any metadata name in the pattern ending with
            # "DateTime", this field will be used to list all the datetime
            # patterns (the format used in the file name).
            Date_Time_Patterns: ['%Y-%j']
        Strip_File_Extension: !!bool true
        Dataset_Keys:
            starttime: ExecutionDateTime

    LDF:
        Pattern: !!python/regexp '(?P<id>(?P<Mission>NISAR)_S(?P<SCID>\d{3})_(?P<Station>\w{2,3})_(?P<Antenna>\w{3,4})_M(?P<Mode>\d{2})_P(?P<Pass>\d{5})_R(?P<Receiver>\d{2})_C(?P<Channel>\d{2})_G(?P<Group>\d{2})_(?P<FileCreationDateTime>\d{4}_\d{3}_\d{2}_\d{2}_\d{2}_\d{5})(?P<R>\d{1,4})\.ldf)$'
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # If you have any metadata name in the pattern ending with
            # "DateTime", this field will be used to list all the datetime
            # patterns (the format used in the file name).
            Date_Time_Patterns: ['%Y_%j_%H_%M_%S_%f']
        Strip_File_Extension: !!bool true
        Suffix: '_LDF'
        Dataset_Keys:
            starttime: FileCreationDateTime

    LDF_STATE_CONFIG:
        Pattern: !!python/regexp '(?P<id>(?P<Mission>NISAR)_S(?P<SCID>\d{3})_(?P<Station>\w{2,3})_(?P<Antenna>\w{3,4})_M(?P<Mode>\d{2})_P(?P<Pass>\d{5})_R(?P<Receiver>\d{2})_C(?P<Channel>\d{2})_G(?P<Group>\d{2})_(?P<FileCreationDateTime>\d{4}_\d{3}_\d{2}_\d{2}_\d{2}_\d{5})(?P<R>\d{1,4})_state-config)$'
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # If you have any metadata name in the pattern ending with
            # "DateTime", this field will be used to list all the datetime
            # patterns (the format used in the file name).
            Date_Time_Patterns: ['%Y_%j']
        Strip_File_Extension: !!bool true
        Dataset_Keys:
            starttime: CreationDateTime

    Observation_Accountability_Report:
        Pattern: !!python/regexp '(?P<id>oad_(?P<ContentType>\w+)_(?P<ValidityStartDateTime>\d{4}-\d{3}T\d{2}:\d{2}:\d{2})_(?P<ValidityEndDateTime>\d{4}-\d{3}T\d{2}:\d{2}:\d{2})\.(xml|json))$'
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            Date_Time_Patterns: ['%Y-%jT%H:%M:%S']
        Strip_File_Extension: !!bool true
        Dataset_Keys:
            starttime: ValidityStartDateTime
            endtime: ValidityEndDateTime

    L2_HLS_L30:
        # Pattern for parsing filenames such as "HLS.L30.T22VEQ.2021248T143156.v2.0.Fmask.tif".
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-naming-conventions)
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<id>(?P<product_shortname>HLS[.]L30)[.](?P<tile_id>T[^\W_]{5})[.](?P<acquisition_ts>(?P<year>\d{4})(?P<day_of_year>\d{3})T(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2}))[.](?P<collection_version>v\d+[.]\d+)[.](?P<band_or_qa>[^\W_]+)[.](?P<format>tif))$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><day number of year>T<hour><minute><second>"
            # For example, "2021248T143156":
            #   year: 2021
            #   day number of year: 248
            #   hour (24hr): 14
            #   minute: 31
            #   second: 56
            Date_Time_Patterns: ['%Y%jT%H%M%S']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['acquisition_ts']
        Dataset_Keys: {}

    L2_HLS_S30:
        # Pattern for parsing filenames such as "HLS.S30.T15SXR.2021250T163901.v2.0.Fmask.tif".
        # This pattern groups the metadata information in the filename using named groups.
        #
        # See naming convention documentation (https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-naming-conventions)
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<id>(?P<product_shortname>HLS[.]S30)[.](?P<tile_id>T[^\W_]{5})[.](?P<acquisition_ts>(?P<year>\d{4})(?P<day_of_year>\d{3})T(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2}))[.](?P<collection_version>v\d+[.]\d+)[.](?P<band_or_qa>[^\W_]+)[.](?P<format>tif))$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><day number of year>T<hour><minute><second>"
            # For example, "2021248T143156":
            #   year: 2021
            #   day number of year: 248
            #   hour (24hr): 14
            #   minute: 31
            #   second: 56
            Date_Time_Patterns: ['%Y%jT%H%M%S']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['acquisition_ts']
        Dataset_Keys: {}

    L3_DWSx_HLS:
        # Pattern for parsing filenames such as:
        # * "OPERA_L3_DSWx_HLS_LANDSAT-8_T22VEQ_20210905T143156_v2.0.tif"
        # * "OPERA_L3_DSWx_HLS_SENTINEL-2A_T15SXR_20210907T163901_v2.0.tif"
        # This pattern groups the metadata information in the filename using named groups.
        #
        # Note: POSIX character class "[[:alnum:]]" is not supported in python's re, and so has been replaced with "[^\W_]" here.
        Pattern: !!python/regexp '(?P<id>(?P<project>OPERA)_(?P<level>L3)_(?P<product_type>DSWx)_(?P<source>HLS)_(?P<sensor>SENTINEL-2A|LANDSAT-8)_(?P<tile_id>T[^\W_]{5})_(?P<datetime>(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})T(?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2}))_(?P<collection_version>v\d+[.]\d+)[.](?P<ext>tif))$'
        Strip_File_Extension: !!bool true
        Extractor: extractor.FilenameRegexMetExtractor
        Configuration:
            # Custom Pattern for dates like "<year><month><day>T<hour><minute><second>"
            # For example, "20210211T163901":
            #   year: 2021
            #   month: 02 (February)
            #   day of month: 11 (the 11th)
            #   hour (24hr): 16
            #   minute: 39
            #   second: 01
            Date_Time_Patterns: ['%Y%m%dT%H%M%S']

            # Specify the metadata key to convert to a start and end time for the dataset times
            Date_Time_Keys: ['datetime']
        Dataset_Keys: {}


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: ONLY MODIFY THE SETTINGS BELOW IF YOU KNOW WHAT YOU'RE DOING !!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Settings to enable forceful ingest of PGE outputs (a.k.a disable no-clobber errors)
# These settings only take effect on those PGE jobs that produce datasets that get
# pushed to object storage.
FORCE_INGEST:
    INGEST_STAGED: !!bool false
