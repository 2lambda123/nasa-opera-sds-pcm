runconfig:
  name: NISAR_INSAR_RUNCONFIG
  PGENameGroup:
    PGEName: "INSAR_L_PGE"
  InputFilePath:
    L1_L_RSLC: "__CHIMERA_VAL__"
  DynamicAncillaryFileGroup:
    DEMFile: "__CHIMERA_VAL__"
  PrimaryExecutable:
    ProductType: RIFG_RUNW_GUNW
    CompositeReleaseID: "__CHIMERA_VAL__"
    ProductAccuracy: "__CHIMERA_VAL__"
  ProductPathGroup:
    # Directory where PGE will place results. Irrelevant to SAS.
    ProductPath: "output"
    # Directory where SAS can write temporary data
    ScratchPath: "scratch"
    # SAS writes output product to the following file. PGE may rename.
    # NOTE: For R2 will need to handle mixed-mode case with multiple outputs of RSLC workflow.
    SASOutputFile: "output/product.h5"
    ProductCounter: "__CHIMERA_VAL__"
  DebugLevelGroup:
    DebugSwitch: false

  #adt section - isce3 + pyre workflow
  processing:
    keep_scratch: true
    input_subset:           # {optional} Mechanism to select frequencies and polarizations
      list_of_frequencies:  # {optional} List of frequencies to process. Default empty representing all
        A: [HH]             # {optional} List of polarization channels to process. Default empty representing all

    dem_download:   # {optional} Only checked when internet access is available
      source:       # {optional} s3 bucket / curl URL / local file
      top_left:
        x:
        y:
      bottom_right:
        x:
        y:

    geocode:         # {optional} Mechanism to specify output posting and DEM
      x_snap:        # {optional} To control output grid in same units as output EPSG
      y_snap:        # {optional} To control output grid in same units as output EPSG
      outputEPSG:    # {optional} Same as input DEM if not provided.
      output_posting:
        A:
          x_posting:
          y_posting:
        B:
          x_posting:
          y_posting:
      top_left:      # {optional} Can control with absolute values or with snap values
        y_abs:       # {optional} Set top-left y in same units as output EPSG
        x_abs:       # {optional} Set top-left x in same units as output EPSG
      bottom_right:  # {optional} Can control with absolute values or with snap values
        y_abs:
        x_abs:

    geo2rdr:
        threshold: "1.0e-8"
        maxiter: 25

    blocksize:
        y: 1000

    dem_margin: 0.1

    coarse_resample:
        lines_per_tile: 100

    dense_offsets:
        enabled: true
        #window_range: 64                    # {optional} Cross-correlation window size in range direction
        #window_azimuth: 64                  # {optional} Cross-correlation window size in azimuth direction
        #search_range: 20                    # {optional} Cross-correlation search window size in range direction
        #search_azimuth: 20                  # {optional} Cross-correlation search window size in azimuth direction
        #skip_range: 8                       # {optional} Cross-correlation skip window size in range direction
        #skip_azimuth: 8                     # {optional} Cross-correlation skip window in azimuth direction
        #zoom: 8                             # {optional} Zoom in window for cross-correlation surface
        #correlation_surface_ovs: 32         # {optional} Oversampling factor for the cross-correlation surface
        #method: amplitude                   # {optional} Cross-correlation method (complex or amplitude)
        #algorithm: frequency                # {optional} Algorithm for cross-correlation computation (spatial

    rubbersheet:
        enabled: true

    fine_resample:
        enabled: true

    crossmul:
      flatten: True
      range_looks: 11
      azimuth_looks: 11

    phase_unwrap:
      crossmul_path:
      algorithm: icu
      #buffer_lines: 1000


  worker:                               # {optional} To setup type of worker
    internet_access: False              # {optional} To prevent downloading DEM / other data automatically. Default True
    gpu_enabled: "__CHIMERA_VAL__"      # {optional} To explicitly use GPU capability if available. Default False
  
  QA:
    validate: False
    quality: False
  pge_job_name: "__CHIMERA_VAL__"
  mock_metadata: "__CHIMERA_VAL__"
  base_name: "__CHIMERA_VAL__"

preconditions:
  - get_gpu_enabled
  - get_crid
  - get_products
  - get_metadata
  - get_product_metadata
  - get_hardcoded_metadata
  - set_pcm_retrieval_id
  - get_product_counter
  - get_dems
  - set_pge_job_name
  - set_mock_metadata
  - set_base_name

# TODO: @bporeh to update accountability postprocess step 
#postprocess:
#  - update_observation_product_accountability

# Processes the product that triggered the job
get_products:
  is_state_config_trigger: true
  file_names_key: "network_pair_rslcs"

get_dems:
  # Can take bbox as before or product metadata key containing the GeoJSON polygon
  #bbox: "-123.724407219755 38.1368492675898 -121.42779037568 39.6108373735625"
  polygon_key: REFERENCE_TRACK_FRAME_POLYGON

get_metadata:
  keys:
    - input_dataset_id

get_product_metadata:
  keys:
    - RadarStartDateTime
    - RadarStopDateTime
    - RelativeOrbitNumber
    - ReferenceCycleNumber
    - SecondaryCycleNumber
    - ProductAccuracy
    - CoverageIndicator
    - OrbitDirectionLetter
    - ProcessingType
    - ReferenceTrackFramePolygon
    - SecondaryTrackFramePolygon

get_hardcoded_metadata:
  # TODO: NEED TO CLARIFY WITH PGE TEAM HOW THESE VALUES ARE DETERMINED
  OrbitDirection: Descending
  CycleNumber: "001" # TODO: remove this once PGE team adds parameters for both reference and secondary
  FrameNumber: "67"

get_product_counter:
    metadata.network_pair_id.keyword: "input_dataset_id"
    metadata.CompositeReleaseID.keyword: "CompositeReleaseID"
    metadata.ProcessingType.keyword: "ProcessingType"

set_pge_job_name:
  template: "{input_dataset_id}"

set_mock_metadata:
  # Hard-coded values in the structure you want
  L1_L_RIFG:
    dynamic:
      ProcessingType: ProcessingType
      ReferenceCycleNumber: ReferenceCycleNumber
      SecondaryCycleNumber: SecondaryCycleNumber
      RelativeOrbitNumber: RelativeOrbitNumber
      OrbitDirectionLetter: OrbitDirectionLetter
      FrameNumber: FrameNumber
      RadarStartDateTime: RadarStartDateTime
      RadarStopDateTime: RadarStopDateTime
      CompositeReleaseID: CompositeReleaseID
      ProductAccuracy: ProductAccuracy
      ProductCounter: ProductCounter
      Bounding_Polygon: SecondaryTrackFramePolygon

  L1_L_RUNW:
    dynamic:
      ProcessingType: ProcessingType
      ReferenceCycleNumber: ReferenceCycleNumber
      SecondaryCycleNumber: SecondaryCycleNumber
      RelativeOrbitNumber: RelativeOrbitNumber
      OrbitDirectionLetter: OrbitDirectionLetter
      FrameNumber: FrameNumber
      RadarStartDateTime: RadarStartDateTime
      RadarStopDateTime: RadarStopDateTime
      CompositeReleaseID: CompositeReleaseID
      ProductAccuracy: ProductAccuracy
      ProductCounter: ProductCounter
      Bounding_Polygon: SecondaryTrackFramePolygon
  
  L2_L_GUNW:
    dynamic:
      ProcessingType: ProcessingType
      ReferenceCycleNumber: ReferenceCycleNumber
      SecondaryCycleNumber: SecondaryCycleNumber
      RelativeOrbitNumber: RelativeOrbitNumber
      OrbitDirectionLetter: OrbitDirectionLetter
      FrameNumber: FrameNumber
      RadarStartDateTime: RadarStartDateTime
      RadarStopDateTime: RadarStopDateTime
      CompositeReleaseID: CompositeReleaseID
      ProductAccuracy: ProductAccuracy
      ProductCounter: ProductCounter
      Bounding_Polygon: SecondaryTrackFramePolygon

# This function will add to the PGE output metadata when product to dataset conversion is performed
set_extra_pge_output_metadata:
  network_pair_id: input_dataset_id
 
# When performing simulated PGE runs, this sets the base name to be used when generating the output
# products.
set_base_name:
  L1_L_RIFG:
    template: NISAR_L1_{ProcessingType}_RIFG_{ReferenceCycleNumber:03d}_{RelativeOrbitNumber:03d}_{OrbitDirectionLetter}_{FrameNumber:03d}_{SecondaryCycleNumber:03d}_2800_HH_{RadarStartDateTime}_{RadarStopDateTime}_{CompositeReleaseID}_{ProductAccuracy}_F_{ProductCounter:03d}
    date_time_formats:
      RadarStartDateTime: "%Y%m%dT%H%M%S"
      RadarStopDateTime: "%Y%m%dT%H%M%S"
  L1_L_RUNW:
    template: NISAR_L1_{ProcessingType}_RUNW_{ReferenceCycleNumber:03d}_{RelativeOrbitNumber:03d}_{OrbitDirectionLetter}_{FrameNumber:03d}_{SecondaryCycleNumber:03d}_2800_HH_{RadarStartDateTime}_{RadarStopDateTime}_{CompositeReleaseID}_{ProductAccuracy}_F_{ProductCounter:03d}
    date_time_formats:
      RadarStartDateTime: "%Y%m%dT%H%M%S"
      RadarStopDateTime: "%Y%m%dT%H%M%S"
  L2_L_GUNW:
    template: NISAR_L2_{ProcessingType}_GUNW_{ReferenceCycleNumber:03d}_{RelativeOrbitNumber:03d}_{OrbitDirectionLetter}_{FrameNumber:03d}_{SecondaryCycleNumber:03d}_2800_HH_{RadarStartDateTime}_{RadarStopDateTime}_{CompositeReleaseID}_{ProductAccuracy}_F_{ProductCounter:03d}
    date_time_formats:
      RadarStartDateTime: "%Y%m%dT%H%M%S"
      RadarStopDateTime: "%Y%m%dT%H%M%S"

# Creates the PCMRetrievalID value to determine product counter
set_pcm_retrieval_id:
  template: NISAR_L2_{ProcessingType}_GUNW_{ReferenceCycleNumber}_{RelativeOrbitNumber}_{OrbitDirectionLetter}_{FrameNumber}_{SecondaryCycleNumber}_{ProductAccuracy}

# The PGE name
pge_name: "INSAR"

# Set the primary input/output types here
primary_input: "L1_L_RSLC"
primary_output: "L2_L_GUNW"

# List the extensions that the PGE generates
output_types:
  L1_L_RIFG:
    - h5
    - h5.log
    - h5.met
  L1_L_RUNW:
    - h5
    - h5.met
  L2_L_GUNW:
    - h5
    - h5.met

# List the groups that Chimera will need to localize
localize_groups:
  - InputFilePath
  - DynamicAncillaryFileGroup
