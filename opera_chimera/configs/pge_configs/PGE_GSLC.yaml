runconfig:
  name: NISAR_L2_L_GSLC_RUNCONFIG
  PGENameGroup:
    PGEName: "GSLC_L_PGE"
  InputFilePath:
    L1_L_RSLC: "__CHIMERA_VAL__"
  DynamicAncillaryFileGroup:
    DEMFile: "__CHIMERA_VAL__"
  ProductPathGroup:
    # Directory where PGE will place results. Irrelevant to SAS.
    ProductPath: "output"
    # Directory where SAS can write temporary data
    ScratchPath: "scratch"
    # SAS writes output product to the following file. PGE may rename.
    # NOTE: For R2 will need to handle mixed-mode case with multiple outputs of RSLC workflow.
    SASOutputFile: "output/gslc.h5"
    ProductCounter: "__CHIMERA_VAL__"
  PrimaryExecutable:
    ProductType: GSLC
    CompositeReleaseID: "__CHIMERA_VAL__"
    ProductAccuracy: "__CHIMERA_VAL__"
  DebugLevelGroup:
    DebugSwitch: Off

      #adt section - isce3 + pyre workflow
  processing:
    input_subset:        #{optional} Mechanism to select frequencies and polarisations
      list_of_frequencies:  #{optional} If we want to use only one frequency. Default {} representing all
        A:                 #{optional} If we only want to use one pol. Default [] representing all
        #B:
    dem_download:   #{optional} Only checked when internet access is available
      source:  None #{optional} s3 bucket / curl URL / local file
      top_left:
        x:
        y:
      bottom_right:
        x:
        y:
    pre_process:
      filter:
        A:
          type:
          parameters:
        B:
          type:
          parameters:
    geocode:        #{optional} Mechanism to specify output posting and DEM
      outputEPSG: #{optional} Same as input DEM if not provided.
      x_snap: #80 #{optional} To control output grid in same units as output EPSG
      y_snap: #100 #{optional} To control output grid in same units as output EPSG
      output_posting:
        A:
          x_posting: #10.0 #0.001   #{required} In same units as output EPSG
          y_posting: #5.0 #0.001   #{required} In same units as output EPSG
        B:
          x_posting: #40.0 #0.001
          y_posting: #5.0 #0.001
      top_left:     #{optional} Can control with absolute values or with snap values
        y_abs: #4047500.0 #36.05   #{optional} Set top-left y in same units as output EPSG
        x_abs: #577500.0 #-90.2   #{optional} Set top-left x in same units as output EPSG
      bottom_right: #{optional} Can control with absolute values or with snap values
        y_abs: #4017500.0 #3949557.0 #35.65
        x_abs: #605000.0 #-89.9

    geo2rdr:

      threshold: "1.0e-8"
      # Max number of primary iterations: int (default: 25)
      maxiter: 25

    # the core module processes the data block by block to mange memory for large datasets
    blocksize:
      # number of lines in northing direction of a block of the geocoded grid
      y: 2000

      # number of lines in easting direction of a block of the geocoded grid
      #x:  # currently not implemented

    # extra margin in [degrees]. Margin of the DEM block relative to block of the geocoded grid
    dem_margin: 0.1
    # flag to flatten output GSLC
    flatten: True

  worker:
    internet_access: False
    gpu_enabled: "__CHIMERA_VAL__"      # {optional} To explicitly use GPU capability if available. Default False
    gpu_id: 0

  QA:
    validate: True
    quality: True
  pge_job_name: "__CHIMERA_VAL__"
  mock_metadata: "__CHIMERA_VAL__"
  base_name: "__CHIMERA_VAL__"

preconditions:
  - get_gpu_enabled
  - get_crid
  - get_products
  - get_metadata
  - get_product_metadata
  - get_hardcoded_metadata
  - set_pcm_retrieval_id
  - get_product_counter
  - get_dems
  - set_product_time
  - set_pge_job_name
  - set_mock_metadata
  - set_base_name

postprocess:
  - update_track_frame_product_accountability

get_dems:
  # Can take bbox as before or product metadata key containing the GeoJSON polygon
  #bbox: "-123.724407219755 38.1368492675898 -121.42779037568 39.6108373735625"
  polygon_key: BOUNDING_POLYGON

get_metadata:
  keys:
    - input_dataset_id

# Looks at the metadata area under the product_metadata area in the context
get_product_metadata:
  keys:
    - RadarStartDateTime
    - RadarStopDateTime
    - CycleNumber
    - RelativeOrbitNumber
    - TrackFrame
    - Bounding_Polygon
    - ProcessingType
  attribute_names:
    TrackFrame: FrameNumber

get_hardcoded_metadata:
  CycleNumber: "1"
  OrbitDirection: Descending
  OrbitDirectionLetter: D
  RelativeOrbitNumber: "001"
  FrameNumber: "150"
  ProcessingType: PR
  ProductAccuracy: P

get_product_counter:
  metadata.PCMRetrievalID.keyword: "PCMRetrievalID"
  metadata.CompositeReleaseID.keyword: "CompositeReleaseID"

set_pge_job_name:
  template: "{input_dataset_id}"

set_mock_metadata:
  # Hard-coded values in the structure you want
  L2_L_GSLC:
    static:
      PGE_Name: "GSLC_L_PGE"
      PGE_Version: "R1.1.0"
      SAS_Version: "ISCE3 v0.2.0-dev"
    dynamic:
      Input_Files: L1_L_RSLC
      Production_DateTime: ProductionDateTime
      RadarStartDateTime: RadarStartDateTime
      RadarStopDateTime: RadarStopDateTime
      CompositeReleaseID: CompositeReleaseID
      Bounding_Polygon: Bounding_Polygon
      ProcessingType: ProcessingType
      CycleNumber: CycleNumber
      RelativeOrbitNumber: RelativeOrbitNumber
      OrbitDirection: OrbitDirection
      OrbitDirectionLetter: OrbitDirectionLetter
      FrameNumber: FrameNumber
      ProductAccuracy: ProductAccuracy
      ProductCounter: ProductCounter

# When performing simulated PGE runs, this sets the base name to be used when generating the output
# products.
set_base_name:
  L2_L_GSLC:
    template: NISAR_L2_{ProcessingType}_GSLC_{CycleNumber:03d}_{RelativeOrbitNumber:03d}_{OrbitDirectionLetter}_{FrameNumber:03d}_4020_VV_{RadarStartDateTime}_{RadarStopDateTime}_{CompositeReleaseID}_{ProductAccuracy}_F_{ProductCounter:03d}
    # This tells the function how to format the date time string in the file name
    date_time_formats:
      RadarStartDateTime: "%Y%m%dT%H%M%S"
      RadarStopDateTime: "%Y%m%dT%H%M%S"

# Creates the PCMRetrievalID value to determine product counter
set_pcm_retrieval_id:
  template: NISAR_L2_{ProcessingType}_GSLC_{CycleNumber}_{RelativeOrbitNumber}_{OrbitDirectionLetter}_{FrameNumber}_{ProductAccuracy}

# The PGE name
pge_name: "GSLC"

# Set the primary input/output types here
primary_input: "L1_L_RSLC"
primary_output: "L2_L_GSLC"

# List the extensions that the PGE generates
output_types:
  L2_L_GSLC:
    - h5
    - h5.log
    - h5.met

# List the groups that Chimera wil l need to localize
localize_groups:
  - InputFilePath
  - DynamicAncillaryFileGroup
