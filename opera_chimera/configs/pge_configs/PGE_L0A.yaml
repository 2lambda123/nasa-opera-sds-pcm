# The runconfig section is intended to be used for dynamically generating the runconfig file used
# when running the NISAR PGEs. Any values set with a "__CHIMERA_VAL__" should be filled in by the input
# preprocessor. Otherwise, a precondition evaluation error will be thrown.
runconfig:
  InputFilePath:
    NEN_L_RRST: "__CHIMERA_VAL__"
  PGEName: "L0A_L_PGE"
  PGEType: "L-SAR"
  ProductPath: "/data/work/output"
  ProductCounter: "__CHIMERA_VAL__"
  DebugSwitch: "Off"
  CompositeReleaseID: "__CHIMERA_VAL__"
  FileSizeLimit: "__CHIMERA_VAL__"
  NumberOfThreads: "__CHIMERA_VAL__"

  pge_job_name: "__CHIMERA_VAL__"
  mock_metadata: "__CHIMERA_VAL__"
  base_name: "__CHIMERA_VAL__"
  extra_pge_output_metadata: "__CHIMERA_VAL__"

# This lists all the precondition evaluation steps that this PGE needs to run prior to running the PGE.
preconditions:
  - get_crid
  - get_products
  - get_product_metadata
  - get_metadata
  - get_file_size_limit
  - get_number_of_threads
  - get_nominal_nens
  - get_product_counter
  - set_product_time
  - set_pge_job_name
  - set_mock_metadata
  - set_base_name
  - set_extra_pge_output_metadata

# This lists all the postprocessor steps that this PGE will run after running the PGE.
postprocess:
  - update_pass_product_accountability

# For any of the precondition evaluation steps listed in the preconditions area,
# specify function arguments here

get_products:
  is_state_config_trigger: true
  file_names_key: "found_rrsts"

# Looks at the context to get metadata
get_metadata:
  keys:
    - input_dataset_id

get_product_metadata:
  keys:
    - vcid

get_file_size_limit:

get_number_of_threads:

# Determines the product counter value to set in the Run Config
# When specifying a "value" field, it will just use the hardcoded value.
get_product_counter:
  metadata.ldf_state_config_id.keyword: "input_dataset_id"
  metadata.CompositeReleaseID.keyword: "CompositeReleaseID"

# This value will get used as part of the job id during the job submission step.
set_pge_job_name:
  template: "{input_dataset_id}"

# When doing simulated PGE runs, this will mock together a set of metadata for the met.json output
set_mock_metadata:
  L0A_L_RRST:
    # Hard-coded values
    static:
      PGE_Name: "L0A_L_PGE"
      PGE_Version: "R1.1.0"
      SAS_Version: "ISCE3 v0.2.0-dev"
      Min_VCFC: 1
      Max_VCFC: 28
      Missing_VCFC_List:
        - 0
        - 3
        - 6
        - 9
        - 12
        - 15
        - 18
        - 21
        - 24
        - 27
      Missing_VCFC_ERT_List: "2019-10-29T17:13:05.813023Z, 2019-10-29T17:13:05.813123Z, 2019-10-29T17:13:05.813199Z,
      2019-10-29T17:13:05.813266Z, 2019-10-29T17:13:05.813342Z, 2019-10-29T17:13:05.813411Z"
      Packets_with_Corrected_FEC: 2
      DAPHNE_Flag_Count: 0

    dynamic:
      # Keys represent the metadata keys that will go into the mock metadata
      # Values represent metadata that is assumed to exist in the job_params
      Input_Files: NEN_L_RRST
      ProductionDateTime: ProductionDateTime
      CompositeReleaseID: CompositeReleaseID
      ProductCounter: ProductCounter
      VCID: vcid

# When performing simulated PGE runs, this sets the base name to be used when generating the output
# products.
set_base_name:
  L0A_L_RRST:
    template: NISAR_L0_RRST_{VCID}_{DAPHNE_Min_Time_Tag}_{DAPHNE_Max_Time_Tag}_{CompositeReleaseID}_{ProductCounter:03d}
    # This tells the function how to format the date time string in the file name
    date_time_formats:
      DAPHNE_Min_Time_Tag: "%Y%m%dT%H%M%S"
      DAPHNE_Max_Time_Tag: "%Y%m%dT%H%M%S"

# This function will add to the PGE output metadata when product to dataset conversion is performed
set_extra_pge_output_metadata:
  ldf_state_config_id: input_dataset_id

# List the extensions that the PGE generates
output_types:
  L0A_L_RRST:
    - bin
    - bin.log
    - bin.met

# The PGE name
pge_name: "L0A"

# Set the primary input/output types here
primary_input: "NEN_L_RRST"
primary_output: "L0A_L_RRST_PP"

# List the groups that Chimera will need to localize
localize_groups:
  - InputFilePath
